# import * from './generated/prisma.graphql'

type SuccessMessage {
  message: String
}

type Mutation {
  signup(email: String!, password: String!, name: String!): User!
  signin(email: String!, password: String!): User!
  signinFacebook(email: String!, facebookId: String!): User!
  updateUserName(name: String!): SuccessMessage!
  requestReset(email: String!): SuccessMessage
  resetPassword(
    resetToken: String!
    password: String!
    confirmPassword: String!
  ): User!
  inviteFriend(name: String, id: String): SuccessMessage!
  acceptFriendInvite(id: String!): SuccessMessage!
  acceptFriend(friendId: String!): SuccessMessage!
  removeFriend(friendId: String!): SuccessMessage!
}

type Query {
  me: User!
  user(id: String!): FindUser
  users(
    where: UserWhereInput
    orderBy: UserOrderByInput
    skip: Int
    first: Int
  ): [FindUser]!
  friendsToInvite(
    where: UserWhereInput
    orderBy: UserOrderByInput
    skip: Int
    first: Int
  ): [FindUser]!
  friendships(
    where: FriendshipWhereInput
    orderBy: FriendshipOrderByInput
    skip: Int
    first: Int
    last: Int
  ): [Friendship!]!
  friendshipsConnection(where: FriendshipWhereInput): FriendshipConnection
  notifications: [Notification!]!
}

type FindUser {
  id: String!
  name: String!
}

type User {
  id: ID!
  name: String
  email: String!
  jwt: String
}

type Friendship {
  id: ID!
  user: User!
  friend: User!
  inviting: User!
  accepted: Boolean!
}

type Notification {
  id: ID!
  user: User!
  type: NotificationType!
  friendship: [Friendship!]
  viewed: Boolean!
  accepted: Boolean!
}
